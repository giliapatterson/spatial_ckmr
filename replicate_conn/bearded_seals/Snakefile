import numpy as np
Ns = np.linspace(5000, 20000, 51)
R0s = np.around(np.log(Ns), decimals = 2)
reps = np.arange(1, 31)
max_int = 30
biases = np.linspace(1, max_int, 3)
max_n = 2000

# burn in
burnin = 40
# ticks between saving parents
tick_interval = 1

# Pattern for parents from simulation
parent_file_pattern = "bearded_seal_parents/parents_{R0}_{rep}.csv"
parents = expand(parent_file_pattern, R0 = R0s, rep = reps)
# Pattern for population sizes from simulation
popsize_file_pattern = "bearded_seal_popsizes/popsizes_{R0}_{rep}.csv"
popsizes = expand(popsize_file_pattern, R0 = R0s, rep = reps)
# Output images
pattern = "bearded_seal_images/{type}_{R0}_{rep}_{bias}_{n}.png"
types = ["spaghetti", "samples", "sampling_intensity"]
image_files = expand(pattern, type = types, R0 = R0s, rep = reps, bias = biases, n = max_n)
metadata_files = expand("bearded_seal_metadata/meta_{R0}_{rep}_{bias}_{n}.csv", R0 = R0s, rep = reps, bias = biases, n = max_n)
labels_file = "labels.csv"

rule all:
    input: 
        image_files, popsizes, parents, metadata_files, labels_file

rule run_slim:
    params:
        parent_file = parent_file_pattern,
        popsize_file = popsize_file_pattern
    output:
        parent_file_pattern,
        popsize_file_pattern
    shell:
        "slim -d R0={wildcards.R0} -d 'OUTPUT=\"{params.parent_file}\"' -d 'POPSIZE_FILE=\"{params.popsize_file}\"' -d TICK_INTERVAL={tick_interval} -d BURNIN={burnin} bearded_seals.slim"

rule plot:
    params:
        max_bias = max_int
    input:
        parent_file_pattern,
        popsize_file_pattern
    output:
        "bearded_seal_images/spaghetti_{R0}_{rep}_{bias}_{n}.png",
        "bearded_seal_images/samples_{R0}_{rep}_{bias}_{n}.png",
        "bearded_seal_images/sampling_intensity_{R0}_{rep}_{bias}_{n}.png",
        "bearded_seal_metadata/meta_{R0}_{rep}_{bias}_{n}.csv"
    shell:
        "python visualize_parents.py {wildcards.R0} {wildcards.rep} {wildcards.bias} {params.max_bias} {wildcards.n} {input} {output}"

rule labels:
    input:
        metadata_files
    output:
        labels_file
    shell:
        """
        echo 'R0,rep,bias,N_avg,n,npairs' >> {output}
        cat {input}  >> {output}
        """