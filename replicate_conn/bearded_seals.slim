initialize() {
	initializeSLiMModelType("nonWF");

	initializeSLiMOptions(keepPedigrees=T, dimensionality="xy");

	initializeSex("A");
	
	if (!exists("OUTPUT")) { 
      defineConstant("OUTPUT", "bearded_seal_parents.csv"); 
   }
	if (!exists("TICK_INTERVAL")) {
   	defineConstant("TICK_INTERVAL", 1);
   }
   if (!exists("BURNIN")) {
   	defineConstant("BURNIN", 40);
   }
   
   if (!exists("R0")) {
   	defineConstant("R0", 9);
   }
   if (!exists("SIGMA")) {
   	defineConstant("SIGMA", 1);
   }
   
   writeFile(OUTPUT, "individual, parent1, parent2, age, sampling_time, x, y");
   
   // Parameters for survival model
   defineConstant("C", 0.2);
   //defineConstant("C", 1.3);
   defineConstant("ETA1", 0.055);
   defineConstant("ETA2", 2.80);
   defineConstant("ETA3", 0.076);
   
   // Initial population size
   defineConstant("N0", asInteger(round(exp(R0))));
	print(N0);
	
	// spatial mate choice
   initializeInteractionType(1, "xy", reciprocal=T, maxDistance=1/sqrt(PI), sexSegregation = "FM");
   

	initializeMutationType("m1", 0.5, "f", 0.0);
	m1.convertToSubstitution = T;
	
	initializeGenomicElementType("g1", m1, 1.0);
	initializeGenomicElement(g1, 0, 99999);
	initializeMutationRate(0);
	initializeRecombinationRate(1e-8);
}

2: first() {
	i1.evaluate(p1);
}

reproduction(NULL, "F") {
	// First check if female breeds
	a = individual.age;
	p_breed = 1/((1 + exp(-1.264*(a-5.424))));
	if (runif(1) < p_breed) {
		// Select male with probability that depends on age
		// Is this correct? Does it guarantee male mate?
		potential_mates = i1.nearestInteractingNeighbors(individual, p1.size());
		//print(potential_mates.sex);
   	if (potential_mates.size()){
   		m_a = potential_mates.age;
			p_mate = 1/((1+exp(-1.868*(m_a - 6.5))));
   		mate = sample(potential_mates, size = 1, weights = p_mate);
   		// Dispersal happens in late
   		offspring = p1.addCrossed(individual, mate);
   		pos = individual.spatialPosition;
      	offspring.setSpatialPosition(pos);
   	}
	}
}


1 early() {
	// Initial population
	sim.addSubpop("p1", N0);
   p1.setSpatialBounds(c(0, 0, 10, 10));
   // Initial ages (need to change this)
   p1.individuals.age = rdunif(N0, min=0, max=10);
   // random initial positions
   for (ind in p1.individuals) {
       ind.setSpatialPosition(p1.pointUniform());
   }
}
early() {
    // Age-based mortality
    inds = p1.individuals;
    ages = inds.age;
    survival = exp(-C*((ETA1*ages)^ETA2 + (ETA1*ages)^(1/ETA2) + ETA3*ages));
    alive = runif(length(inds)) < survival;
    dead = !alive;
	 inds.fitnessScaling = alive;
	 dead_inds = p1.individuals[dead];
	 // Write dead individuals and their ages, parents, and sampling times to file
    if (community.tick % TICK_INTERVAL == 0 & community.tick >= BURNIN){
		for(ind in dead_inds){
			writeFile(OUTPUT, paste(c(ind.pedigreeID, ind.pedigreeParentIDs, ind.age, community.tick), sep = ",") + "," + paste(c(ind.x, ind.y), sep = ","), append = T);
		}
	}
}

late()
{
	// Dispersal
	for (ind in p1.individuals)
	{
		newPos = ind.spatialPosition + rnorm(2, 0, SIGMA);
		ind.setSpatialPosition(p1.pointReflected(newPos));
	}
}


late() {
	// print our age distribution after mortality
	//catn(sim.cycle + ": " + paste(sort(p1.individuals.age)));
}

60 late() {
	sim.simulationFinished();
}
