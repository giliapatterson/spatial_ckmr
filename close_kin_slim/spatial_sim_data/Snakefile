import numpy as np
Ks = np.arange(500, 1000, step = 20)
#Ks = [500, 999]
nreps = np.arange(2)
ss = (np.sqrt(np.max(Ks))*10).astype('int')
print(ss)
sim_pattern = "{prefix}/spatial_sim_parents_{K}_{rep}_{ss}{ext}"
input_matrices = expand(sim_pattern, prefix = "input_matrices", K=Ks, rep = nreps, ss = ss, ext=".csv")
pop_sizes = expand(sim_pattern, prefix = "input_matrices", K=Ks, rep = nreps, ss = ss, ext=".N.csv")
spaghetti =  expand(sim_pattern, prefix = "images", K=Ks, rep = nreps, ss = ss, ext="_spaghetti.png")
sampling =  expand(sim_pattern, prefix = "images", K=Ks, rep = nreps, ss = ss, ext="_samples.png")

rule all:
    input: 
        "labels.csv",

rule run_slim:
    output:
        "spatial_parents/spatial_sim_parents_{K}_{rep}.csv"
    shell:
        "slim -d K={wildcards.K} -d 'OUTPUT=\"{output}\"' spatial_sim.slim"

rule get_kin:
    input:
        "spatial_parents/spatial_sim_parents_{K}_{rep}.csv"
    output:
        "input_matrices/spatial_sim_parents_{K}_{rep}_{ss}.csv",
        temporary("input_matrices/spatial_sim_parents_{K}_{rep}_{ss}.N.csv")
    shell:
        "python get_kin_parents.py {input} {output} {wildcards.ss}"

rule plot:
    input:
        "input_matrices/spatial_sim_parents_{K}_{rep}_{ss}.csv"
    output:
        "images/spatial_sim_parents_{K}_{rep}_{ss}_spaghetti.png",
        "images/spatial_sim_parents_{K}_{rep}_{ss}_samples.png"
    shell:
        "python make_spaghetti.py {input} {output}"

rule aggregate:
    input:
        spaghetti, sampling, pop_sizes 
    output:
        "labels.csv",
    shell:
        "cat {pop_sizes}  > labels.csv"