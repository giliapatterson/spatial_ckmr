import numpy as np
#Ks = np.arange(500, 1000, step = 1)
Ks = [500, 999]
#nreps = np.arange(10)
nreps = np.arange(2)
#ss = [223, 316]
ss = (np.sqrt(Ks)*10).astype('int')
sim_pattern = "input_matrices/spatial_sim_parents_{K}_{rep}_{ss}{ext}"
input_matrices = expand(sim_pattern, K=Ks, rep = nreps, ss = ss, ext=".csv")
pop_sizes = expand(sim_pattern, K=Ks, rep = nreps, ss = ss, ext=".N.csv")
print(ss)
print(Ks)

rule all:
    input: 
        "labels.csv",

rule run_slim:
    output:
        "spatial_parents/spatial_sim_parents_{K}_{rep}.csv"
    shell:
        "slim -d K={wildcards.K} -d 'OUTPUT=\"{output}\"' spatial_sim.slim"

rule get_kin:
    input:
        "spatial_parents/spatial_sim_parents_{K}_{rep}.csv"
    output:
        "input_matrices/spatial_sim_parents_{K}_{rep}_{ss}.csv",
        temporary("input_matrices/spatial_sim_parents_{K}_{rep}_{ss}.N.csv")
    shell:
        "python get_kin_parents.py {input} {output} {wildcards.ss}"

rule aggregate:
    input:
        input_matrices, pop_sizes 
    output:
        "labels.csv",
    shell:
        "cat {pop_sizes}  > labels.csv"