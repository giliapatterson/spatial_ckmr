initialize() {
	initializeSLiMModelType("nonWF");
	initializeSLiMOptions(keepPedigrees=T, dimensionality="xy");
	// initializeTreeSeq(retainCoalescentOnly=F);
	
	if (!exists("OUTPUT")) { 
      defineConstant("OUTPUT", "test_spatial_parents.csv"); 
   }
   
	// if (!exists("OUTFILE")) { 
   //   defineConstant("OUTFILE", "test_spatial_sim.trees"); 
   //}
   if (!exists("K")) {
   	defineConstant("K", 500);   // carrying capacity
   }
   if (!exists("SIGMA")) {
   	defineConstant("SIGMA", 0.5);   // Dispersal
   }
	if (!exists("S")){
		defineConstant("S", 0.1);   // spatial competition distance
	}

	if (!exists("TICK_INTERVAL")) {
   	defineConstant("TICK_INTERVAL", 100);
   }
   if (!exists("BURNIN")) {
   	defineConstant("BURNIN", 300);
   }

	initializeMutationType("m1", 0.5, "f", 0.0);
	m1.convertToSubstitution = T;
	
	initializeGenomicElementType("g1", m1, 1.0);
	initializeGenomicElement(g1, 0, 99999);
	initializeMutationRate(0);
	initializeRecombinationRate(1e-8);
	
	// spatial competition
	initializeInteractionType(1, "xy", reciprocal=T, maxDistance=S);
	
}

reproduction() {
	
	for (i in seqLen(rpois(1, 0.1)))
	{
		offspring = subpop.addSelfed(individual);
		pos = individual.spatialPosition + rnorm(2, 0, SIGMA);
        offspring.setSpatialPosition(p1.pointReflected(pos));
	}
}
1 early() {
	 sim.addSubpop("p1", K);
    p1.setSpatialBounds(c(0, 0, 1, 1));
    // random initial positions
    for (ind in p1.individuals) {
        ind.setSpatialPosition(p1.pointUniform());
    }
}
early() {
	i1.evaluate(sim.subpopulations);
	
	// spatial competition provides density-dependent selection
	inds = p1.individuals;
	competition = i1.localPopulationDensity(inds);
	inds.fitnessScaling = K / competition;
}
late()
{
	// move around a bit
	for (ind in p1.individuals)
	{
		newPos = ind.spatialPosition + runif(2, -0.01, 0.01);
		ind.setSpatialPosition(p1.pointReflected(newPos));
	}
}

late() {
    //sim.treeSeqRememberIndividuals(p1.individuals, permanent=T);
}


late() {
	// check age distribution
	if (community.tick % TICK_INTERVAL == 0 & community.tick >= BURNIN){
		i = asInteger((community.tick - BURNIN)/TICK_INTERVAL);
		writeFile(OUTPUT + "_" + i + ".csv", "individual, parent1, parent2, age, x, y");
		for(ind in p1.individuals){
			writeFile(OUTPUT + "_" + i + ".csv", paste(c(ind.pedigreeID, ind.pedigreeParentIDs, ind.age), sep = ",") + "," + paste(c(ind.x, ind.y), sep = ","), append = T);
		}
		//sim.treeSeqOutput(OUTFILE, simplify=F);
	}
}

3000 late() {
	sim.simulationFinished();
}
