import numpy as np

# Population sizes to simulate
Ns = np.linspace(100, 1000, 51).astype(int)
#Ns = np.linspace(150, 250, 3).astype(int)

# Number of times to run each simulation
reps = np.arange(1, 51)
#reps = np.array([1, 2])

# Sample sizes for each simulation
ns = np.linspace(30, 500, 10).astype(int)

# File names for the output file of each individual and their parents from each simulation
spatout_pattern = "elephant_data/spatial_sample_{N}_{n}_{rep}.csv"
spatout = expand(spatout_pattern, N = Ns, n = ns, rep = reps)

spatlocs_pattern = "elephant_data/spatial_locations_{N}_{n}_{rep}.csv"
spatlocs = expand(spatlocs_pattern, N = Ns, n = ns, rep = reps)

randout_pattern = "elephant_data/random_sample_{N}_{n}_{rep}.csv"
randout = expand(randout_pattern, N = Ns, n = ns, rep = reps)

# File names for population sizes from each simulation
popsize_file_pattern = "elephant_data/popsizes_{N}_{n}_{rep}.csv"
popsizes = expand(popsize_file_pattern, N=Ns, n = ns, rep = reps)

# File names for images of parent-offspring pairs, sibling pairs, and sampling intensity for each simulation
pattern = "elephant_data/{type}_{N}_{n}_{rep}.png"
types = ["pops", "halfsibs", "random_pops", "random_halfsibs"]
image_files = expand(pattern, type = types, N = Ns, n = ns, rep = reps)

# File names for metadata files for each simulation (values of parameters and number of parent-offspring and sibling pairs)
metadata_files = expand("elephant_data/metadata/meta_{N}_{n}_{rep}.csv", N = Ns, n = ns, rep = reps)
random_metadata_files = expand("elephant_data/metadata/random_meta_{N}_{n}_{rep}.csv", N = Ns, n = ns, rep = reps)

# File to store information about all the simulations
labels_file = "elephant_data/spatial_labels.csv"
random_labels_file = "elephant_data/random_labels.csv"

rule all:
    input: 
        popsizes, spatout, randout, spatlocs, image_files, metadata_files, random_metadata_files, labels_file, random_labels_file

rule run_slim:
    params:
        spatout_file = lambda wildcards, output: output[0],
        randout_file = lambda wildcards, output: output[1],
        spatlocs_file = lambda wildcards, output: output[2],
        popsize_file = lambda wildcards, output: output[3]
    output:
        spatout_pattern,
        randout_pattern,
        spatlocs_pattern,
        popsize_file_pattern
    shell:
        "slim  -d N0={wildcards.N} -d SAMPLE_SIZE={wildcards.n} -d 'SPAT_SAMP_OUT=\"{params.spatout_file}\"' -d 'SAMPLE_LOCS_OUT=\"{params.spatlocs_file}\"' -d 'RAND_SAMP_OUT=\"{params.randout_file}\"' -d 'POPSIZE_FILE=\"{params.popsize_file}\"' elephants.slim"

rule plot_spatial:
    params:
        sample_file = lambda wildcards, input: input[0],
        popsize_file = lambda wildcards, input: input[1],
        pops_file = lambda wildcards, output: output[0],
        hs_file = lambda wildcards, output: output[1],
        meta_file = lambda wildcards, output: output[2]
    input:
        spatout_pattern,
        popsize_file_pattern
    output:
        "elephant_data/pops_{N}_{n}_{rep}.png",
        "elephant_data/halfsibs_{N}_{n}_{rep}.png",
        "elephant_data/metadata/meta_{N}_{n}_{rep}.csv"
    shell:
        "python plot_spaghetti.py -N {wildcards.N} -n {wildcards.n} --rep {wildcards.rep} --parents_file {params.sample_file} --popsize_file {params.popsize_file} --spaghetti_pops_out {params.pops_file} --spaghetti_sibs_out {params.hs_file} --metadata_out {params.meta_file}"

rule plot_random:
    params:
        sample_file = lambda wildcards, input: input[0],
        popsize_file = lambda wildcards, input: input[1],
        pops_file = lambda wildcards, output: output[0],
        hs_file = lambda wildcards, output: output[1],
        meta_file = lambda wildcards, output: output[2]
    input:
        randout_pattern,
        popsize_file_pattern
    output:
        "elephant_data/random_pops_{N}_{n}_{rep}.png",
        "elephant_data/random_halfsibs_{N}_{n}_{rep}.png",
        "elephant_data/metadata/random_meta_{N}_{n}_{rep}.csv"
    shell:
        "python plot_spaghetti.py -N {wildcards.N} -n {wildcards.n} --rep {wildcards.rep} --parents_file {params.sample_file} --popsize_file {params.popsize_file} --spaghetti_pops_out {params.pops_file} --spaghetti_sibs_out {params.hs_file} --metadata_out {params.meta_file}"

rule labels:
    input:
        metadata_files,
    output:
        labels_file
    shell:
        """
        echo 'N,rep,N_final,n,npops,nsibs,nfullsibs' >> {output}
        cat {input}  >> {output}
        """
rule random_labels:
    input:
        random_metadata_files,
    output:
        random_labels_file
    shell:
        """
        echo 'N,rep,N_final,n,npops,nsibs,nfullsibs' >> {output}
        cat {input}  >> {output}
        """
