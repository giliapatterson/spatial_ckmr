initialize() {
	initializeSLiMModelType("nonWF");

	initializeSLiMOptions(keepPedigrees=T, dimensionality="xy");

	initializeSex("A");
	
	if (!exists("OUTPUT")) { 
      defineConstant("OUTPUT", "elephant_parents.csv"); 
   }
   if (!exists("POPSIZE_FILE")) { 
      defineConstant("POPSIZE_FILE", "elephant_popsize.csv"); 
   }
	if (!exists("TICK_INTERVAL")) {
   	defineConstant("TICK_INTERVAL", 1);
   }
   if (!exists("BURNIN")) {
   	defineConstant("BURNIN", 40);
   }
   
   if (!exists("N0")) {
   	defineConstant("N0", 60);
   }
   if (!exists("SIGMA")) {
   	defineConstant("SIGMA", 1);
   }
   if (!exists("NOFFSPRING")) {
   	defineConstant("NOFFSPRING", 2);
   }
   
 
	
	// spatial mate choice
	initializeInteractionType(1, "xy", reciprocal=T, maxDistance=10, sexSegregation = "FM");
	
	// Survival from life table
	survival = readCSV("survival.csv");
	defineConstant("SURVIVAL", survival);
	
	initializeMutationType("m1", 0.5, "f", 0.0);
	m1.convertToSubstitution = T;
	
	initializeGenomicElementType("g1", m1, 1.0);
	initializeGenomicElement(g1, 0, 99999);
	initializeMutationRate(0);
	initializeRecombinationRate(1e-8);
}

2: first() {
	i1.evaluate(p1);
}

reproduction(NULL, "F") {
	// First check if female breeds	
	if(individual.age > 30){
		years_since_last_rep = community.tick - individual.tag;
		if (years_since_last_rep > 2) {
			potential_mates = i1.nearestInteractingNeighbors(individual, p1.size());
	   	if (potential_mates.size()){
   			m_a = potential_mates.age;
				p_mate = asInteger(m_a > 30);
   			mate = sample(potential_mates, size = 1, weights = p_mate);
   			individual.tag = community.tick;
   			for (i in 1:NOFFSPRING){
   				offspring1 = p1.addCrossed(individual, mate);
   				pos = individual.spatialPosition;
      			offspring1.setSpatialPosition(pos);
      			if(offspring1.sex == "F"){
      				offspring1.color = "pink";
      				offspring1.tag = -2;
      			}
      			if(offspring1.sex == "M"){
      				offspring1.color = "blue";
      			}
      		}
   		}
		}
	}	
}


1 early() {
	// Initial population
	sim.addSubpop("p1", N0);
   
   mapImage = Image("kibale.png");
   map = p1.defineSpatialMap("kibale", "xy", 1.0-mapImage.floatK, valueRange = c(0.0, 1.0), colors = c("white", "green"));
   defineConstant("KIBALE", map);
   
   // Initial ages
   //age_distribution = rep(1, 76);
   p1.individuals.age = rep(31, N0);
   // random initial positions within the boundaries of kibale
   for (ind in p1.individuals) {
   	// Generate new position uniformly
   	pos = p1.pointUniform();
   	// Is position within Kibale's bounds?
		inBounds = KIBALE.mapValue(pos) == 1.0;
		while (!inBounds){
			pos = p1.pointUniform();
			inBounds = KIBALE.mapValue(pos) == 1.0;
		}
		ind.setSpatialPosition(pos);
		if (ind.sex == "F"){
			ind.color = "pink";
			// Last year individual bred
			ind.tag =sample(-2:0, 1) ;		
		}
		if (ind.sex == "M"){
			ind.color = "blue";		
		}
   }
}
early() {
    // Age-based mortality
    for (ind in p1.individuals){
    	surv_prob = SURVIVAL.getValue(ind.sex)[ind.age];
    	alive = runif(1) < surv_prob;
    	ind.fitnessScaling = asFloat(alive);
    }
}

late()
{
	// Dispersal
	for (ind in p1.individuals)
	{
		newPos = KIBALE.sampleImprovedNearbyPoint(ind.spatialPosition, 10.0, "n", SIGMA);
		ind.setSpatialPosition(newPos);
	}
	if (community.tick % TICK_INTERVAL == 0 & community.tick >= BURNIN){
		writeFile(POPSIZE_FILE, paste(c(community.tick, p1.individualCount), sep = ","), append = T);
	}
	print("Late pop size");
	print(length(p1.individuals));
}

60 late() {
	sim.simulationFinished();
}
